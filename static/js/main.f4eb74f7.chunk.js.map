{"version":3,"sources":["components/Upload.js","components/Table.js","components/MonthSelect.js","App.js","serviceWorker.js","index.js"],"names":["Uploader","props","onChange","uploadProps","name","action","beforeUpload","file","reader","FileReader","onloadend","cb","e","body","target","result","Papa","parse","header","data","errors","length","message","error","console","log","success","processFile","readAsText","fileList","type","columns","title","dataIndex","render","text","format","Date","StatementTable","onSelectionChange","dataWithKeys","map","row","key","id","rowSelection","keys","dataSource","Option","Select","months","MonthSelect","style","width","placeholder","month","i","value","getRunningTotal","rows","maxIndex","total","Number","amount","download","filename","element","document","createElement","setAttribute","encodeURIComponent","display","appendChild","click","removeChild","formatOutputForCrunch","tableData","created","Reference","description","Balance","balance","App","useState","selectedMonth","setSelectedMonth","selectedRows","setSelectedRows","startingBalance","setStartingBalance","statementData","setStatementData","processedStatementData","filter","getMonth","padding","marginBottom","marginRight","Upload","prefix","suffix","marginLeft","onClick","today","formattedOutput","unparse","includes","Table","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4eb74f7.chunk.js","sourcesContent":["import React from 'react';\nimport { Upload, message, Button, Icon } from 'antd';\nimport Papa from 'papaparse';\n\nconst processFile = (file, cb) => e => {\n  const body = e.target.result;\n  const { data, errors } = Papa.parse(body, { header: true });\n  if (errors.length) {\n    message.error('There are errors with this CSV, see console.');\n    console.log(errors);\n  } else {\n    message.success(`${file.name} file uploaded successfully`);\n    cb(data);\n  }\n};\n\nconst Uploader = props => {\n  const { onChange } = props;\n\n  const uploadProps = {\n    name: 'file',\n    action: null,\n    beforeUpload(file) {\n      const reader = new FileReader();\n      reader.onloadend = processFile(file, onChange);\n      reader.readAsText(file);\n      return false;\n    },\n    fileList: [],\n  };\n\n  return (\n    <Upload {...uploadProps}>\n      <Button>\n        <Icon type=\"upload\" /> Upload Monzo CSV\n      </Button>\n    </Upload>\n  );\n};\n\nexport default Uploader;\n","import React from 'react';\nimport { Table } from 'antd';\nimport { format } from 'date-fns';\n\nconst columns = [\n  {\n    title: 'ID',\n    dataIndex: 'id',\n  },\n  {\n    title: 'Created',\n    dataIndex: 'created',\n    render: text => format(new Date(text), 'd/MM/yyyy'),\n  },\n  {\n    title: 'Description',\n    dataIndex: 'description',\n  },\n  {\n    title: 'Notes',\n    dataIndex: 'notes',\n  },\n  {\n    title: 'Amount',\n    dataIndex: 'amount',\n  },\n  {\n    title: 'Balance',\n    dataIndex: 'balance',\n  },\n];\n\nconst StatementTable = props => {\n  const { data, onSelectionChange } = props;\n  const dataWithKeys = data.map(row => ({\n    key: row.id,\n    ...row,\n  }));\n\n  return (\n    <Table\n      rowSelection={{\n        onChange: keys => onSelectionChange(keys),\n      }}\n      columns={columns}\n      dataSource={dataWithKeys}\n    />\n  );\n};\n\nexport default StatementTable;\n","import React from 'react';\nimport { Select } from 'antd';\n\nconst { Option } = Select;\n\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst MonthSelect = props => {\n  const { onChange } = props;\n  return (\n    <Select style={{ width: 120 }} onChange={onChange} placeholder=\"Month...\">\n      {months.map((month, i) => (\n        <Option value={i}>{month}</Option>\n      ))}\n    </Select>\n  );\n};\n\nexport default MonthSelect;\n","import React, { useState } from 'react';\nimport { Button, Input } from 'antd';\nimport { getMonth, format } from 'date-fns';\nimport Papa from 'papaparse';\nimport Upload from './components/Upload';\nimport Table from './components/Table';\nimport MonthSelect from './components/MonthSelect';\n\nconst getRunningTotal = (rows, maxIndex) => {\n  let total = 0;\n  for (let i = 0; i < maxIndex + 1; i++) {\n    total += Number(rows[i].amount);\n  }\n  return total;\n};\n\nconst download = (filename, text) => {\n  var element = document.createElement('a');\n  element.setAttribute(\n    'href',\n    'data:text/plain;charset=utf-8,' + encodeURIComponent(text),\n  );\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n};\n\nconst formatOutputForCrunch = tableData => {\n  return tableData.map(row => ({\n    Date: format(new Date(row.created), 'd/MM/yyyy'),\n    Reference: row.description,\n    'Paid In Paid Out': row.amount,\n    Balance: row.balance,\n  }));\n};\n\nfunction App() {\n  const [selectedMonth, setSelectedMonth] = useState(null);\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [startingBalance, setStartingBalance] = useState(0);\n  const [statementData, setStatementData] = useState([]);\n\n  const processedStatementData = statementData\n    .filter(row => {\n      return (\n        selectedMonth === null ||\n        selectedMonth === getMonth(new Date(row.created))\n      );\n    })\n    .map((row, i) => ({\n      ...row,\n      balance: getRunningTotal(statementData, i) + startingBalance,\n    }));\n\n  // Handlers\n\n  const handleDeleteSelectedRows = () => {\n    setStatementData(\n      statementData.filter(row => !selectedRows.includes(row.id)),\n    );\n    setSelectedRows([]);\n  };\n\n  const handleExport = () => {\n    const today = format(new Date(), 'd/MM/yyyy');\n    const formattedOutput = formatOutputForCrunch(processedStatementData);\n    download(`crunch-statement-${today}.csv`, Papa.unparse(formattedOutput));\n  };\n\n  return (\n    <div style={{ padding: 30 }}>\n      <div style={{ display: 'flex', marginBottom: 30 }}>\n        <div style={{ marginRight: 10 }}>\n          <Upload onChange={setStatementData} />\n        </div>\n        <div style={{ marginRight: 10 }}>\n          <Input\n            prefix=\"Â£\"\n            suffix=\"GBP\"\n            placeholder=\"Starting Amount\"\n            type=\"number\"\n            onChange={e => setStartingBalance(Number(e.target.value))}\n          />\n        </div>\n        <div style={{ marginRight: 10 }}>\n          <MonthSelect onChange={setSelectedMonth} />\n        </div>\n        <div style={{ marginRight: 10, marginLeft: 'auto' }}>\n          <Button onClick={handleExport}>Export for Crunch</Button>\n        </div>\n        <Button type=\"danger\" onClick={handleDeleteSelectedRows}>\n          Delete Selected\n        </Button>\n      </div>\n      <Table\n        data={processedStatementData}\n        onSelectionChange={setSelectedRows}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}